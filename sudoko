#include <stdio.h>
#include <stdbool.h>

#define SIZE 9

// Function to check if placing num at board[row][col] is valid
bool isValid(char board[SIZE][SIZE], int row, int col, char num) {
    // Check the row and column
    for (int i = 0; i < SIZE; i++) {
        if (board[row][i] == num || board[i][col] == num) {
            return false;
        }
    }

    // Check the 3x3 sub-box
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Backtracking function to solve the Sudoku
bool solveSudoku(char board[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            // Find an empty cell
            if (board[row][col] == '.') {
                // Try numbers from '1' to '9'
                for (char num = '1'; num <= '9'; num++) {
                    if (isValid(board, row, col, num)) {
                        board[row][col] = num; // Place the number

                        // Recursively try to fill in the rest of the board
                        if (solveSudoku(board)) {
                            return true; // If successful, return true
                        }

                        // If placing num didn't lead to a solution, reset the cell
                        board[row][col] = '.';
                    }
                }
                return false; // Trigger backtracking
            }
        }
    }
    return true; // Solved successfully
}

// Function to print the Sudoku board
void printBoard(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    char board[SIZE][SIZE] = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    printf("Original Sudoku Board:\n");
    printBoard(board);

    if (solveSudoku(board)) {
        printf("\nSolved Sudoku Board:\n");
        printBoard(board);
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}
